package cmd

/*
Copyright Â© 2024 Rudolf Farkas @rudifa rudi.farkas@gmail.com
*/

import (
	"fmt"
	"log"
	"os"
	"strings"

	"github.com/rudifa/cuedo/runner"
	"github.com/spf13/cobra"
)

type options struct {
	FbbKludge                    bool
	FormatterHexdump             bool
	FormatterStacktrace          bool
	FullMonty                    bool
	ParserAstNodeTypeAndComments bool
	ParserAstSpew                bool
	ParserAstTree                bool
	ParserCommentsStack          bool
	ParserCommentsPos            bool
	ParserDebugStr               bool
	ParserStacktrace             bool
	ParserToken                  bool
	ParserTrace                  bool
	ProcessBothWithAndWoComments bool
}

var opts = &options{}

// formatCmd represents the format command
var formatCmd = &cobra.Command{
	Use:   "format",
	Short: "Parse and format a CUE file, optionally displaying the parser and formatter inner data.",
	Long: `Parse and format a CUE file, optionally displaying the parser and formatter inner data.

	In the absence of any flags, the command will parse and format the CUE file and print the input and the result.

	Add flags in any combination to display the inner data.

	To trace the parser execution, use parser flags individually or in combination, e.g. -cnt or -cntw or -copst.
	To visualize the AST generated by the parser, use flags -d or -ad.
	To trace the formatter execution, use flags -xs.

	To compare parsing with vs. without comments, use flag -b.

	To see everything, use flag -m.

	`,
	Aliases: []string{"fmt"},
	Run: func(cmd *cobra.Command, args []string) {
		// Set the environment variables that control the parser and formatter logging
		opts.setEnvironmentVariables()

		// Get the filename from the command arguments
		if len(args) != 1 {
			log.Fatalf("Please provide a filename as argument")
		}
		filename := args[0]

		fmt.Println(opts.optionsInfo(filename))
		if verbose {
			printEnvVars()
		}

		runner.RunParseAndFormat(filename)
	},
}

func init() {
	rootCmd.AddCommand(formatCmd)
	opts.bindFlags(formatCmd)

	// customize the usage message _after_ flags are defined
	defaultUsage := formatCmd.UsageString()
	customUsage := strings.Replace(defaultUsage, "cuedo format", "cuedo format <inputfile>.cue", -1)
	formatCmd.SetUsageTemplate(customUsage)
}

func (o *options) bindFlags(formatCmd *cobra.Command) {
	formatCmd.Flags().BoolVarP(&o.FbbKludge, "fbb_kludge", "k", false, "formatting: enable a kludge in parser to anticipate a fix for the issue #2567")
	formatCmd.Flags().BoolVarP(&o.FormatterHexdump, "formatter_hexdump", "x", false, "formatting: print a hex dump of the formatter's internal buffer, for each fragment when printed")
	formatCmd.Flags().BoolVarP(&o.FormatterStacktrace, "formatter_stacktrace", "f", false, "formatting: print the stack trace for each fragment when printed")
	formatCmd.Flags().BoolVarP(&o.FullMonty, "full_monty", "m", false, "turn on everything")
	formatCmd.Flags().BoolVarP(&o.ParserAstSpew, "parser_ast_spew", "w", false, "parsing: deep pretty print the AST tree")
	formatCmd.Flags().BoolVarP(&o.ParserAstNodeTypeAndComments, "parser_ast_node_type_and_comments", "n", false, "parsing: print the AST node type and comments (and DebugStr) while creating nodes")
	formatCmd.Flags().BoolVarP(&o.ParserCommentsPos, "parser_comments_pos", "c", false, "parsing: print the comment position and text while creating nodes")
	formatCmd.Flags().BoolVarP(&o.ParserCommentsStack, "parser_comments_stack", "s", false, "parsing: print the comments stack while creating nodes")
	formatCmd.Flags().BoolVarP(&o.ParserStacktrace, "parser_stack_trace", "p", false, "parsing: print the parser stack trace while creating nodes")
	formatCmd.Flags().BoolVarP(&o.ParserToken, "parser_token", "o", false, "parsing: print the parser token while creating nodes")
	formatCmd.Flags().BoolVarP(&o.ParserTrace, "parser_trace", "t", false, "parsing: print the parser.Trace while creating nodes")
	formatCmd.Flags().BoolVarP(&o.ParserAstTree, "parser_ast_tree", "a", false, "parsed: print the final AST tree")
	formatCmd.Flags().BoolVarP(&o.ParserDebugStr, "parser_debug_str", "d", false, "parsed: print the final AST debug string")
	formatCmd.Flags().BoolVarP(&o.ProcessBothWithAndWoComments, "process_both_with_and_without_comments", "b", false, "process both with and without comments")
}

func (o *options) setEnvironmentVariables() {
	if o.FullMonty {
		o.FbbKludge = true
		o.FormatterHexdump = true
		o.FormatterStacktrace = true
		o.ParserAstNodeTypeAndComments = true
		o.ParserAstSpew = true
		o.ParserAstTree = true
		o.ParserCommentsStack = true
		o.ParserCommentsPos = true
		o.ParserDebugStr = true
		o.ParserStacktrace = true
		o.ParserToken = true
		o.ParserTrace = true
		o.ProcessBothWithAndWoComments = true
	}
	if o.FbbKludge {
		os.Setenv("CUEDO_FBB_KLUDGE", "1")
	}
	if o.FormatterHexdump {
		os.Setenv("CUEDO_FORMATTER_HEXDUMP", "1")
	}
	if o.FormatterStacktrace {
		os.Setenv("CUEDO_FORMATTER_STACKTRACE", "1")
	}
	if o.ParserAstSpew {
		os.Setenv("CUEDO_AST_NODE_SPEW", "1")
	}
	if o.ParserAstTree {
		os.Setenv("CUEDO_AST_TREE", "1")
	}
	if o.ParserAstNodeTypeAndComments {
		os.Setenv("CUEDO_AST_NODE_TYPE_AND_COMMENTS", "1")
	}
	if o.ParserCommentsPos {
		os.Setenv("CUEDO_PARSER_COMMENTS_POS", "1")
	}
	if o.ParserCommentsStack {
		os.Setenv("CUEDO_PARSER_COMMENTS_STACK", "1")
	}
	if o.ParserDebugStr {
		os.Setenv("CUEDO_PARSER_DEBUG_STR", "1")
	}
	if o.ParserStacktrace {
		os.Setenv("CUEDO_PARSER_STACKTRACE", "1")
	}
	if o.ParserToken {
		os.Setenv("CUEDO_PARSER_TOKEN", "1")
	}
	if o.ParserTrace {
		os.Setenv("CUEDO_PARSER_TRACE", "1")
	}
	if o.ProcessBothWithAndWoComments {
		os.Setenv("CUEDO_PROCESS_BOTH_WITH_AND_WITHOUT_COMMENTS", "1")
	}
}

func (o *options) LogOptions() {
	if o.FbbKludge {
		log.Println("fbb_kludge:", o.FbbKludge)
	}
	if o.FormatterHexdump {
		log.Println("formatter_hexdump:", o.FormatterHexdump)
	}
	if o.FormatterStacktrace {
		log.Println("formatter_stacktrace:", o.FormatterStacktrace)
	}
	if o.FullMonty {
		log.Println("full_monty:", o.FullMonty)
	}
	if o.ParserAstSpew {
		log.Println("parser_ast_spew:", o.ParserAstSpew)
	}
	if o.ParserAstTree {
		log.Println("parser_ast_tree:", o.ParserAstTree)
	}
	if o.ParserAstNodeTypeAndComments {
		log.Println("parser_ast_node_type_and_comments:", o.ParserAstNodeTypeAndComments)
	}
	if o.ParserCommentsPos {
		log.Println("parser_comments_pos:", o.ParserCommentsPos)
	}
	if o.ParserCommentsStack {
		log.Println("parser_comments_stack:", o.ParserCommentsStack)
	}
	if o.ParserDebugStr {
		log.Println("parser_debug_str:", o.ParserDebugStr)
	}
	if o.ParserStacktrace {
		log.Println("parser_stacktrace:", o.ParserStacktrace)
	}
	if o.ParserToken {
		log.Println("parser_token:", o.ParserToken)
	}
	if o.ParserTrace {
		log.Println("parser_trace:", o.ParserTrace)
	}
	if o.ProcessBothWithAndWoComments {
		log.Println("process_both_with_and_without_comments:", o.ProcessBothWithAndWoComments)
	}
}

// optionsInfo prints the options set like "options: -ftan" that includes all the options set
func (o *options) optionsInfo(filename string) string {
	str := "-"

	if o.ParserAstTree {
		str += "a"
	}
	if o.ParserCommentsPos {
		str += "c"
	}
	if o.ParserDebugStr {
		str += "d"
	}
	if o.FbbKludge {
		str += "k"
	}
	if o.FullMonty {
		str += "m"
	}
	if o.ParserAstNodeTypeAndComments {
		str += "n"
	}
	if o.FormatterStacktrace {
		str += "f"
	}
	if o.ParserToken {
		str += "o"
	}
	if o.ParserStacktrace {
		str += "p"
	}
	if o.ParserCommentsStack {
		str += "s"
	}
	if o.ParserTrace {
		str += "t"
	}
	if o.FormatterHexdump {
		str += "x"
	}
	if o.ParserAstSpew {
		str += "w"
	}
	if o.ProcessBothWithAndWoComments {
		str += "b"
	}

	if str == "-" {
		str = ""
	}

	out := "cuedo format " + filename + " " + str

	return out
}

// printEnvVars prints envvars that are set
func printEnvVars() {
	envvars := []string{
		"CUEDO_AST_NODE_SPEW",
		"CUEDO_AST_NODE_TYPE_AND_COMMENTS",
		"CUEDO_AST_TREE",
		"CUEDO_FBB_KLUDGE",
		"CUEDO_FORMATTER_HEXDUMP",
		"CUEDO_FORMATTER_STACKTRACE",
		"CUEDO_PARSER_COMMENTS_STACK",
		"CUEDO_PARSER_COMMENTS_POS",
		"CUEDO_PARSER_DEBUG_STR",
		"CUEDO_PARSER_STACKTRACE",
		"CUEDO_PARSER_TOKEN",
		"CUEDO_PARSER_TRACE",
		"CUEDO_PROCESS_BOTH_WITH_AND_WITHOUT_COMMENTS",
	}
	for _, envvar := range envvars {
		if os.Getenv(envvar) != "" {
			log.Printf("%s is set\n", envvar)
		}
	}
}
